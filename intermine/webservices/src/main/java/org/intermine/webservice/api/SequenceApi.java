/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.intermine.webservice.api;

import org.intermine.webservice.model.Sequence;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-06-22T06:09:52.181+05:30[Asia/Kolkata]")
@Api(value = "sequence", description = "the sequence API")
public interface SequenceApi {

    @ApiOperation(value = "Get a portion of a sequence-like object.", nickname = "sequenceGet", notes = "Get either the entire sequence of an object, or fetch an indexed sub-sequence of it. This service expects a query with a single output column that resolves to a sub-sequenceable object. For example to get a sub-sequence of the genomic sequence of the fly X chromosome in a genomic mine, the following query could be used: ``` <query model=\"genomic\" view=\"Chromosome.sequence.residues\"> <constraint path=\"Chromosome\" op=\"LOOKUP\" value=\"X\" extraValue=\"D. melanogaster\"/> </query> ``` ", response = Sequence.class, tags={ "Sequence Access" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Sequence.class) })
    @RequestMapping(value = "/sequence",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Sequence> sequenceGet(@NotNull @ApiParam(value = "The xml OR JSON of the query to run.", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "The start index.") @Valid @RequestParam(value = "start", required = false) Integer start,@ApiParam(value = "The end index.") @Valid @RequestParam(value = "end", required = false) Integer end);


    @ApiOperation(value = "Get a portion of a sequence-like object.", nickname = "sequencePost", notes = "Get either the entire sequence of an object, or fetch an indexed sub-sequence of it. This service expects a query with a single output column that resolves to a sub-sequenceable object. For example to get a sub-sequence of the genomic sequence of the fly X chromosome in a genomic mine, the following query could be used: ``` <query model=\"genomic\" view=\"Chromosome.sequence.residues\"> <constraint path=\"Chromosome\" op=\"LOOKUP\" value=\"X\" extraValue=\"D. melanogaster\"/> </query> ``` ", response = Sequence.class, tags={ "Sequence Access" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Sequence.class) })
    @RequestMapping(value = "/sequence",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Sequence> sequencePost(@NotNull @ApiParam(value = "The xml OR JSON of the query to run.", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "The start index.") @Valid @RequestParam(value = "start", required = false) Integer start,@ApiParam(value = "The end index.") @Valid @RequestParam(value = "end", required = false) Integer end);

}
