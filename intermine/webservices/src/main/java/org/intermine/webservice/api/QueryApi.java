/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.intermine.webservice.api;

import io.swagger.annotations.*;
import org.intermine.webservice.model.SavedQueries;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-06-22T06:09:52.181+05:30[Asia/Kolkata]")
@Api(value = "query", description = "the query API")
public interface QueryApi {

    @ApiOperation(value = "Get the code to run a pathquery in a given language.", nickname = "generatedCodeGet", notes = "This service provides the ability to generate code in one of several languages based on a pathquery provided in serialised form.", response = Object.class, tags={ "Generated Code" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Object.class) })
    @RequestMapping(value = "/query/code",
        produces = { "text/plain", "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> generatedCodeGet(@NotNull @ApiParam(value = "The language to generate code in.", required = true, allowableValues = "pl, py, rb, js, java") @Valid @RequestParam(value = "lang", required = true, defaultValue = "py") String lang,@NotNull @ApiParam(value = "The query to generate code for, in XML or JSON form.", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "", allowableValues = "text, xml, json") @Valid @RequestParam(value = "format", required = false, defaultValue = "text") String format);


    @ApiOperation(value = "Get the code to run a pathquery in a given language.", nickname = "generatedCodePost", notes = "This service provides the ability to generate code in one of several languages based on a pathquery provided in serialised form.", response = Object.class, tags={ "Generated Code" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Object.class) })
    @RequestMapping(value = "/query/code",
        produces = { "text/plain", "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<?> generatedCodePost(@NotNull @ApiParam(value = "The language to generate code in.", required = true, allowableValues = "pl, py, rb, js, java") @Valid @RequestParam(value = "lang", required = true, defaultValue = "py") String lang,@NotNull @ApiParam(value = "The query to generate code for, in XML or JSON form.", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "", allowableValues = "text, xml, json") @Valid @RequestParam(value = "format", required = false, defaultValue = "text") String format);

    @ApiOperation(value = "Save queries to a user account on the server.", nickname = "queryUploadGet", notes = "This service provides the facility to submit one or more queries             and save it/them for future reference to a user account on the server.", response = SavedQueries.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={ "Save Query" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = SavedQueries.class) })
    @RequestMapping(value = "/query/upload",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<?> queryUploadGet(@NotNull @ApiParam(value = "A definition of the query/ies to save in Path-Query XML or JSON format.", required = true) @Valid @RequestParam(value = "query", required = true) String query, @ApiParam(value = "The version of the path-qeury format being used.") @Valid @RequestParam(value = "version", required = false, defaultValue = "2") Integer version, @ApiParam(value = "", allowableValues = "json, text") @Valid @RequestParam(value = "format", required = false, defaultValue = "json") String format);


    @ApiOperation(value = "Save queries to a user account on the server.", nickname = "queryUploadPost", notes = "This service provides the facility to submit one or more queries             and save it/them for future reference to a user account on the server.", response = SavedQueries.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={ "Save Query" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = SavedQueries.class) })
    @RequestMapping(value = "/query/upload",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<?> queryUploadPost(@NotNull @ApiParam(value = "A definition of the query/ies to save in Path-Query XML or JSON format.", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "The version of the path-qeury format being used.") @Valid @RequestParam(value = "version", required = false, defaultValue = "2") Integer version,@ApiParam(value = "", allowableValues = "json, text") @Valid @RequestParam(value = "format", required = false, defaultValue = "json") String format);

}
