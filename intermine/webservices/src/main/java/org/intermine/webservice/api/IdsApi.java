/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.intermine.webservice.api;

import org.intermine.webservice.model.IdResolutionPost;
import org.intermine.webservice.model.IdResolutionResults;
import org.intermine.webservice.model.IdResolutionStatus;
import org.intermine.webservice.model.SimpleJsonModel;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-07-21T19:02:56.453+05:30[Asia/Kolkata]")
@Api(value = "ids", description = "the ids API")
public interface IdsApi {

    @ApiOperation(value = "Delete a given job from the server.", nickname = "idsDelete", notes = "Each job should be removed from the server when the user has finished inspecting the results.", response = SimpleJsonModel.class, authorizations = {
        @Authorization(value = "ApiKeyAuthToken"),
@Authorization(value = "BasicAuth"),
@Authorization(value = "JWTBearerAuth")    }, tags={ "Id Resolution" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SimpleJsonModel.class) })
    @RequestMapping(value = "/ids/{uid}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<SimpleJsonModel> idsDelete(@ApiParam(value = "The unique identifier of the job.", required = true) @PathVariable("uid") String uid);


    @ApiOperation(value = "Start a New ID Resolution Job on the Server.", nickname = "idsPost", notes = "New ID resolution jobs are created by posting a representation of the job to this service. Jobs are run asynchronously, so this service simply submits the job, and returns the identifier of the job, so that its results and status may be polled later. <br/><br/> A job is a data structure (represented as `json`) that satisfies the following [json-schema](http://json-schema.org/) schema: <br/><br/> {     &emsp;\"type\":  \"object\", \\   &emsp;\"required\": [\"identifiers\", \"type\"], \\   &emsp;\"properties\": { \\     &emsp;&emsp;\"identifiers\": { \\       &emsp;&emsp;&emsp;\"type\": \"array\", \\       &emsp;&emsp;&emsp;\"items\": { \"type\": \"string\" }, \\       &emsp;&emsp;&emsp;\"minItems\": 1, \\       &emsp;&emsp;&emsp;\"uniqueItems\": true \\     &emsp;&emsp;}, \\     &emsp;\"type\":          { \"type\": \"string\"  }, \\     &emsp;\"extra\":         { \"type\": \"string\"  }, \\     &emsp;\"caseSensitive\": { \"type\": \"boolean\" }, \\     &emsp;\"wildCards\":     { \"type\": \"boolean\" } \\   &emsp;} \\ } ", response = IdResolutionPost.class, authorizations = {
        @Authorization(value = "ApiKeyAuthToken"),
@Authorization(value = "BasicAuth"),
@Authorization(value = "JWTBearerAuth")    }, tags={ "Id Resolution" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IdResolutionPost.class) })
    @RequestMapping(value = "/ids",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<IdResolutionPost> idsPost(@ApiParam(value = "A representation of the job. This must include a list of identifiers to resolve, and the type of object these ids are meant to resolve to.") @Valid @RequestBody String body);


    @ApiOperation(value = "Get the Results of a Given Job", nickname = "idsResultsGet", notes = "Get the full results of running a specific job", response = IdResolutionResults.class, authorizations = {
        @Authorization(value = "ApiKeyAuthToken"),
@Authorization(value = "BasicAuth"),
@Authorization(value = "JWTBearerAuth")    }, tags={ "Id Resolution" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IdResolutionResults.class) })
    @RequestMapping(value = "/ids/{uid}/results",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<IdResolutionResults> idsResultsGet(@ApiParam(value = "The unique identifier of the job.", required = true) @PathVariable("uid") String uid);


    @ApiOperation(value = "Check the Status of a Given Job.", nickname = "idsStatusGet", notes = "Get a representation of the status of job.", response = IdResolutionStatus.class, authorizations = {
        @Authorization(value = "ApiKeyAuthToken"),
@Authorization(value = "BasicAuth"),
@Authorization(value = "JWTBearerAuth")    }, tags={ "Id Resolution" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IdResolutionStatus.class) })
    @RequestMapping(value = "/ids/{uid}/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<IdResolutionStatus> idsStatusGet(@ApiParam(value = "The unique identifier of the job.", required = true) @PathVariable("uid") String uid);

}
