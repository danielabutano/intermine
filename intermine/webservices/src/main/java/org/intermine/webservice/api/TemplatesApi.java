/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.intermine.webservice.api;

import org.intermine.webservice.model.SavedTemplate;
import org.intermine.webservice.model.SimpleJsonModel;
import org.intermine.webservice.model.Tags;
import org.intermine.webservice.model.Templates;
import org.intermine.webservice.model.TemplatesSystem;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-06-19T01:19:48.599+05:30[Asia/Kolkata]")
@Api(value = "templates", description = "the templates API")
public interface TemplatesApi {

    @ApiOperation(value = "Get the list of system templates.", nickname = "templatesSystem", notes = "Get a listing of the templates configured in an InterMine instance tagged with the `im:converter` tag.", response = TemplatesSystem.class, tags={ "Templates (System)" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TemplatesSystem.class) })
    @RequestMapping(value = "/templates/system",
        method = RequestMethod.GET)
    ResponseEntity<?> templatesSystem(@ApiParam(value = "", allowableValues = "xml, json") @Valid @RequestParam(value = "format", required = false, defaultValue = "xml") String format);

    @ApiOperation(value = "Get the list of available templates.", nickname = "templatesGet", notes = "Get a listing of the templates configured in an InterMine instance. Each template contains a description of its properties, defining the parameters that must be provided to run it, as well as a definition of the output format for its results. If the request is authenticated to a user, then the templates that that has access to will also be returned.", response = Templates.class, tags={ "Templates" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Templates.class) })
    @RequestMapping(value = "/templates",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<?> templatesGet(@ApiParam(value = "Whether or not to include invalid templates. Invalid templates cannot be run.") @Valid @RequestParam(value = "includeBroken", required = false) Boolean includeBroken, @ApiParam(value = "", allowableValues = "xml, json") @Valid @RequestParam(value = "format", required = false, defaultValue = "xml") String format);


    @ApiOperation(value = "Upload one or more templates.", nickname = "templatesPost", notes = "Upload a set of templates to the current user profile.", response = SimpleJsonModel.class,  authorizations = {
            @Authorization(value = "BasicAuth")    },  tags={ "Templates" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = SimpleJsonModel.class) })
    @RequestMapping(value = "/templates",
            produces = { "application/json" },
            consumes = { "application/xml" },
            method = RequestMethod.POST)
    ResponseEntity<?> templatesPost(@ApiParam(value = "The templates to upload. If using body content."  )  @Valid @RequestBody String body,@ApiParam(value = "The xml or JSON to load, if using form parameters.") @Valid @RequestParam(value = "xml", required = false) String xml,@ApiParam(value = "", allowableValues = "xml, json") @Valid @RequestParam(value = "format", required = false, defaultValue = "xml") String format);

    @ApiOperation(value = "Save a Template, or Overwrite an Existing One.", nickname = "templateUploadGet", notes = "This service allows users to save templates they have authored on the server, associated with their account. The templates once saved can be used as any other template query.", response = SimpleJsonModel.class, authorizations = {
            @Authorization(value = "BasicAuth")    }, tags={ "Template Upload" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = SimpleJsonModel.class) })
    @RequestMapping(value = "/template/upload",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<?> templateUploadGet(@NotNull @ApiParam(value = "One or more templates, serialised in XML or JSON format.", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "The version of the XML format.") @Valid @RequestParam(value = "version", required = false) Integer version,@ApiParam(value = "", allowableValues = "text, json, html, xml") @Valid @RequestParam(value = "format", required = false, defaultValue = "text") String format);


    @ApiOperation(value = "Save a Template, or Overwrite an Existing One.", nickname = "templateUploadPost", notes = "This service allows users to save templates they have authored on the server, associated with their account. The templates once saved can be used as any other template query.", response = SimpleJsonModel.class, authorizations = {
            @Authorization(value = "BasicAuth")    }, tags={ "Template Upload" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = SimpleJsonModel.class) })
    @RequestMapping(value = "/template/upload",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<?> templateUploadPost(@NotNull @ApiParam(value = "One or more templates, serialised in XML or JSON format.", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "The version of the XML format.") @Valid @RequestParam(value = "version", required = false) Integer version,@ApiParam(value = "", allowableValues = "text, json, html, xml") @Valid @RequestParam(value = "format", required = false, defaultValue = "text") String format);

    @ApiOperation(value = "Delete a template by name.", nickname = "savedTemplateDelete", notes = "This resource exposes the ability to delete specific templates, identified         by name.         <br/><br/>         A user can only delete templates that they own, and must be executed         with `Read/Write` permission.", response = SimpleJsonModel.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={ "Saved Template" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = SimpleJsonModel.class) })
    @RequestMapping(value = "/templates/{name}",
            produces = { "application/json" },
            method = RequestMethod.DELETE)
    ResponseEntity<?> savedTemplateDelete(@ApiParam(value = "The name of the template to delete.",required=true) @PathVariable("name") String name,@ApiParam(value = "", allowableValues = "xml, json") @Valid @RequestParam(value = "format", required = false, defaultValue = "json") String format);


    @ApiOperation(value = "Retrieve a template by name.", nickname = "savedTemplateGet", notes = "This resource retrieves a representation of a named template, returning         404 if the template cannot be found.         <br/><br/>         If the request is authenticated, then the templates visible to that user (created by         or shared with them) will be included along with publically accessible templates.", response = SavedTemplate.class, tags={ "Saved Template" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = SavedTemplate.class) })
    @RequestMapping(value = "/templates/{name}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<?> savedTemplateGet(@ApiParam(value = "The name of the template to fetch.",required=true) @PathVariable("name") String name,@ApiParam(value = "", allowableValues = "xml, json") @Valid @RequestParam(value = "format", required = false, defaultValue = "json") String format);

    @ApiOperation(value = "Delete one or more tags from a list.", nickname = "templateTagsDelete", notes = "", response = Tags.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={ "Template Tags" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Tags.class) })
    @RequestMapping(value = "/template/tags",
            produces = { "application/json" },
            method = RequestMethod.DELETE)
    ResponseEntity<?> templateTagsDelete(@NotNull @ApiParam(value = "The name of a template to add the tag(s) to.", required = true) @Valid @RequestParam(value = "name", required = true) String name,@NotNull @ApiParam(value = "The name of the tags to remove. It should take to from of a semi-colon delimited concatenation of the tag names.", required = true) @Valid @RequestParam(value = "tags", required = true) String tags,@ApiParam(value = "", allowableValues = "xml, json, tab, csv") @Valid @RequestParam(value = "format", required = false, defaultValue = "json") String format);


    @ApiOperation(value = "Get the tags for a template, or all the tags for a given user.", nickname = "templateTagsGet", notes = "Fetch an up-to-date list of all tags associated with a template, or all templates.", response = Tags.class, tags={ "Template Tags" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Tags.class) })
    @RequestMapping(value = "/template/tags",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<?> templateTagsGet(@ApiParam(value = "The name of a template whose tags to retrieve. If no template is provided, then all the tags associated with the authenticating user will be returned.") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "", allowableValues = "xml, json, tab, csv") @Valid @RequestParam(value = "format", required = false, defaultValue = "json") String format);


    @ApiOperation(value = "Add one or more tags to a list.", nickname = "templateTagsPost", notes = "", response = Tags.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={ "Template Tags" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Tags.class) })
    @RequestMapping(value = "/template/tags",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<?> templateTagsPost(@NotNull @ApiParam(value = "The name of a template to add the tag(s) to.", required = true) @Valid @RequestParam(value = "name", required = true) String name,@NotNull @ApiParam(value = "The name of the tags to add. It should take to from of a semi-colon delimited concatenation of the tag names.", required = true) @Valid @RequestParam(value = "tags", required = true) String tags,@ApiParam(value = "", allowableValues = "xml, json, tab, csv") @Valid @RequestParam(value = "format", required = false, defaultValue = "json") String format);

}
