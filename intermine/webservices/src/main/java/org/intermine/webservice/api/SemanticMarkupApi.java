
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.intermine.webservice.api;

import org.intermine.webservice.model.SemanticMarkup;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-06-19T01:19:48.599+05:30[Asia/Kolkata]")
@Api(value = "semantic-markup", description = "the semantic-markup API")
public interface SemanticMarkupApi {

    @ApiOperation(value = "Get semantic markup for datacatalog type.", nickname = "semanticMarkupDatacatalog", notes = "This service provides semantic markup for the InterMine home page.", response = SemanticMarkup.class, tags={ "Semantic Markup" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SemanticMarkup.class) })
    @RequestMapping(value = "/semantic-markup/datacatalog",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SemanticMarkup> semanticMarkupDatacatalog();


    @ApiOperation(value = "Get semantic markup for bioentity.", nickname = "semanticMarkupBioEntity", notes = "This service provides semantic markup for BioChemEntity type.", response = SemanticMarkup.class, tags={ "Semantic Markup" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SemanticMarkup.class) })
    @RequestMapping(value = "/semantic-markup/bioentity",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SemanticMarkup> semanticMarkupBioEntity(@NotNull @ApiParam(value = "The type of the bioentity.", required = true) @Valid @RequestParam(value = "type", required = true) String type,@NotNull @ApiParam(value = "The primary identifier of the bioentity.", required = true) @Valid @RequestParam(value = "id", required = true) Integer id);


    @ApiOperation(value = "Get semantic markup for dataset type.", nickname = "semanticMarkupDataset", notes = "This service provides semantic markup for DataSet type.", response = SemanticMarkup.class, tags={ "Semantic Markup" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SemanticMarkup.class) })
    @RequestMapping(value = "/semantic-markup/dataset",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SemanticMarkup> semanticMarkupDataset(@NotNull @ApiParam(value = "The name of the dataset.", required = true) @Valid @RequestParam(value = "name", required = true) String name,@ApiParam(value = "The description of the dataset.") @Valid @RequestParam(value = "description", required = false) String description,@ApiParam(value = "The url of the dataset.") @Valid @RequestParam(value = "url", required = false) String url);


}
