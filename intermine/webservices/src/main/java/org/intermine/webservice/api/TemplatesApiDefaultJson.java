/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.intermine.webservice.api;

import org.intermine.webservice.model.QueryResultsJson;
import org.intermine.webservice.model.SavedTemplate;
import org.intermine.webservice.model.SimpleJsonModel;
import org.intermine.webservice.model.Tags;
import org.intermine.webservice.model.Templates;
import org.intermine.webservice.model.TemplatesSystem;
import io.swagger.annotations.*;
import org.intermine.webservice.model.ToList;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-06-19T01:19:48.599+05:30[Asia/Kolkata]")
@Api(value = "templates", description = "the templates API")
public interface TemplatesApiDefaultJson {

    @ApiOperation(value = "Add items to a list from a set of results from running a template.", nickname = "templateAppendToListGet", notes = "This service allows the user to add items to a list from the result set of running a template with a given set of parameters. The parameters for running the template are the same as when requesting results, and in addition to these parameters the user needs to supply the name of a list to append the results to. <br/><br/> To define which part of the template results to use, the user must supply a path parameter which indicates a valid column from the output to be used. <br/><br/> Users should provide parameters of the form `constraint{N}`, `op{N}`, `value{N}` and `extra{N}` for each editable contraint, where `N` represents a number to group the values. The value of the `constraint{N}` parameter serves to identify the constraint, and may not be changed. Values for `op{N}` and `value{N}` must be given, and may be anything the user requires. <br/><br/> To run a template, for example which has the following editable constraints:  <br/> ``` <constraint path=\"Gene.symbol\" op=\"=\" value=\"eve\" editable=\"true\"/> <constraint path=\"Gene.length\" op=\"&gt;\" value=\"1000\" editable=\"true\"/> ``` <br/><br/> Then the user should supply the following parameters to run it with the above values: <br/><br/> | Parameter &nbsp; &nbsp; &nbsp; &nbsp; | Value &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> |----------------------|------------------&nbsp; |<br/> | constraint1 &nbsp; &nbsp; &nbsp; &nbsp;| Gene.symbol      |<br/> | op1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | eq &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> | value1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | eve &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;|<br/> | constraint2 &nbsp; &nbsp; &nbsp; &nbsp;| Gene.length &nbsp;|<br/> | op2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | gt &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> | value2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | 1000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/><br/> The value of the number used to identify each constraint is ignored - it must however be consistent for each parameter. One set of template constraint parameters is required for each editable constraint on the query. These are not required for optional constraints.", response = ToList.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={ "Append to List from Template Results" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = ToList.class) })
    @RequestMapping(value = "/template/append/tolist",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<?> templateAppendToListGet(@NotNull @ApiParam(value = "The name of the template to run.", required = true) @Valid @RequestParam(value = "name", required = true) String name,@NotNull @ApiParam(value = "The path to use to compose the results. This should be one of the selected view paths.", required = true) @Valid @RequestParam(value = "path", required = true) String path,@NotNull @ApiParam(value = "The name for the new list. There must be no existing list of this name.", required = true) @Valid @RequestParam(value = "listName", required = true) String listName,@ApiParam(value = "One of a variable set of parameters used to supply constraint paths.") @Valid @RequestParam(value = "constraint1", required = false) String constraint1,@ApiParam(value = "One of a variable set of parameters used to supply constraint operators.") @Valid @RequestParam(value = "op1", required = false) String op1,@ApiParam(value = "One of a variable set of parameters used to supply constraint values.") @Valid @RequestParam(value = "value1", required = false) String value1,@ApiParam(value = "One of a variable set of parameters used to supply constraint codes. Codes are only required if two constraints have the same path.") @Valid @RequestParam(value = "code1", required = false) String code1,@ApiParam(value = "One of a variable set of parameters used to supply extra constraint values (used by LOOKUP constraints).") @Valid @RequestParam(value = "extra1", required = false) String extra1,@ApiParam(value = "", allowableValues = "json, text") @Valid @RequestParam(value = "format", required = false, defaultValue = "json") String format);


    @ApiOperation(value = "Add items to a list from a set of results from running a template.", nickname = "templateAppendToListPost", notes = "This service allows the user to add items to a list from the result set of running a template with a given set of parameters. The parameters for running the template are the same as when requesting results, and in addition to these parameters the user needs to supply the name of a list to append the results to. <br/><br/> To define which part of the template results to use, the user must supply a path parameter which indicates a valid column from the output to be used. <br/><br/> Users should provide parameters of the form `constraint{N}`, `op{N}`, `value{N}` and `extra{N}` for each editable contraint, where `N` represents a number to group the values. The value of the `constraint{N}` parameter serves to identify the constraint, and may not be changed. Values for `op{N}` and `value{N}` must be given, and may be anything the user requires. <br/><br/> To run a template, for example which has the following editable constraints:  <br/> ``` <constraint path=\"Gene.symbol\" op=\"=\" value=\"eve\" editable=\"true\"/> <constraint path=\"Gene.length\" op=\"&gt;\" value=\"1000\" editable=\"true\"/> ``` <br/><br/> Then the user should supply the following parameters to run it with the above values: <br/><br/> | Parameter &nbsp; &nbsp; &nbsp; &nbsp; | Value &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> |----------------------|------------------&nbsp; |<br/> | constraint1 &nbsp; &nbsp; &nbsp; &nbsp;| Gene.symbol      |<br/> | op1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | eq &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> | value1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | eve &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;|<br/> | constraint2 &nbsp; &nbsp; &nbsp; &nbsp;| Gene.length &nbsp;|<br/> | op2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | gt &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> | value2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | 1000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/><br/> The value of the number used to identify each constraint is ignored - it must however be consistent for each parameter. One set of template constraint parameters is required for each editable constraint on the query. These are not required for optional constraints.", response = ToList.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={ "Append to List from Template Results" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = ToList.class) })
    @RequestMapping(value = "/template/append/tolist",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<?> templateAppendToListPost(@NotNull @ApiParam(value = "The name of the template to run.", required = true) @Valid @RequestParam(value = "name", required = true) String name,@NotNull @ApiParam(value = "The path to use to compose the results. This should be one of the selected view paths.", required = true) @Valid @RequestParam(value = "path", required = true) String path,@NotNull @ApiParam(value = "The name for the new list. There must be no existing list of this name.", required = true) @Valid @RequestParam(value = "listName", required = true) String listName,@ApiParam(value = "One of a variable set of parameters used to supply constraint paths.") @Valid @RequestParam(value = "constraint1", required = false) String constraint1,@ApiParam(value = "One of a variable set of parameters used to supply constraint operators.") @Valid @RequestParam(value = "op1", required = false) String op1,@ApiParam(value = "One of a variable set of parameters used to supply constraint values.") @Valid @RequestParam(value = "value1", required = false) String value1,@ApiParam(value = "One of a variable set of parameters used to supply constraint codes. Codes are only required if two constraints have the same path.") @Valid @RequestParam(value = "code1", required = false) String code1,@ApiParam(value = "One of a variable set of parameters used to supply extra constraint values (used by LOOKUP constraints).") @Valid @RequestParam(value = "extra1", required = false) String extra1,@ApiParam(value = "", allowableValues = "json, text") @Valid @RequestParam(value = "format", required = false, defaultValue = "json") String format);


    @ApiOperation(value = "Get the results from running a template with a given set of parameters.", nickname = "templateResultsGet", notes = "Templates are predefined parameterised queries which may be run by supplying values and operators for the available editable constraints. The editable constraints vary from template to template, so knowledge of these (obtainable by calls to `/templates`) is required to use this service correctly. <br/><br/> Users should provide parameters of the form `constraint{N}`, `op{N}`, `value{N}` and `extra{N}` for each editable contraint, where `N` represents a number to group the values. The value of the `constraint{N}` parameter serves to identify the constraint, and may not be changed. Values for `op{N}` and `value{N}` must be given, and may be anything the user requires. <br/><br/> To run a template, for example which has the following editable constraints:  <br/> ``` <constraint path=\"Gene.symbol\" op=\"=\" value=\"eve\" editable=\"true\"/> <constraint path=\"Gene.length\" op=\"&gt;\" value=\"1000\" editable=\"true\"/> ``` <br/><br/> Then the user should supply the following parameters to run it with the above values: <br/><br/> | Parameter &nbsp; &nbsp; &nbsp; &nbsp; | Value &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> |----------------------|------------------&nbsp; |<br/> | constraint1 &nbsp; &nbsp; &nbsp; &nbsp;| Gene.symbol      |<br/> | op1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | eq &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> | value1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | eve &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;|<br/> | constraint2 &nbsp; &nbsp; &nbsp; &nbsp;| Gene.length &nbsp;|<br/> | op2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | gt &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> | value2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | 1000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/><br/> The value of the number used to identify each constraint is ignored - it must however be consistent for each parameter. One set of template constraint parameters is required for each editable constraint on the query. These are not required for optional constraints.", response = QueryResultsJson.class, tags={ "Template Results" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = QueryResultsJson.class) })
    @RequestMapping(value = "/template/results",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<?> templateResultsGet(@NotNull @ApiParam(value = "The name of the template to run.", required = true) @Valid @RequestParam(value = "name", required = true) String name,@ApiParam(value = "One of a variable set of parameters used to supply constraint paths.") @Valid @RequestParam(value = "constraint1", required = false) String constraint1,@ApiParam(value = "One of a variable set of parameters used to supply constraint operators.") @Valid @RequestParam(value = "op1", required = false) String op1,@ApiParam(value = "One of a variable set of parameters used to supply constraint values.") @Valid @RequestParam(value = "value1", required = false) String value1,@ApiParam(value = "One of a variable set of parameters used to supply constraint codes. Codes are only required if two constraints have the same path.") @Valid @RequestParam(value = "code1", required = false) String code1,@ApiParam(value = "One of a variable set of parameters used to supply extra constraint values (used by LOOKUP constraints).") @Valid @RequestParam(value = "extra1", required = false) String extra1,@ApiParam(value = "The index of the first result to return.") @Valid @RequestParam(value = "start", required = false) Integer start,@ApiParam(value = "The maximum size of the result set.") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Include column headers. Use friendly for human readable paths. (Only for flat-file formats).", allowableValues = "none, path, friendly") @Valid @RequestParam(value = "columnheaders", required = false) String columnheaders,@ApiParam(value = "", allowableValues = "tab, csv, count, json, jsonobject, jsoncount, xml, html") @Valid @RequestParam(value = "format", required = false, defaultValue = "tab") String format);


    @ApiOperation(value = "Get the results from running a template with a given set of parameters.", nickname = "templateResultsPost", notes = "Templates are predefined parameterised queries which may be run by supplying values and operators for the available editable constraints. The editable constraints vary from template to template, so knowledge of these (obtainable by calls to `/templates`) is required to use this service correctly. <br/><br/> Users should provide parameters of the form `constraint{N}`, `op{N}`, `value{N}` and `extra{N}` for each editable contraint, where `N` represents a number to group the values. The value of the `constraint{N}` parameter serves to identify the constraint, and may not be changed. Values for `op{N}` and `value{N}` must be given, and may be anything the user requires. <br/><br/> To run a template, for example which has the following editable constraints:  <br/> ``` <constraint path=\"Gene.symbol\" op=\"=\" value=\"eve\" editable=\"true\"/> <constraint path=\"Gene.length\" op=\"&gt;\" value=\"1000\" editable=\"true\"/> ``` <br/><br/> Then the user should supply the following parameters to run it with the above values: <br/><br/> | Parameter &nbsp; &nbsp; &nbsp; &nbsp; | Value &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> |----------------------|------------------&nbsp; |<br/> | constraint1 &nbsp; &nbsp; &nbsp; &nbsp;| Gene.symbol      |<br/> | op1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | eq &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> | value1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | eve &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;|<br/> | constraint2 &nbsp; &nbsp; &nbsp; &nbsp;| Gene.length &nbsp;|<br/> | op2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | gt &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> | value2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | 1000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/><br/> The value of the number used to identify each constraint is ignored - it must however be consistent for each parameter. One set of template constraint parameters is required for each editable constraint on the query. These are not required for optional constraints.", response = QueryResultsJson.class, tags={ "Template Results" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = QueryResultsJson.class) })
    @RequestMapping(value = "/template/results",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<?> templateResultsPost(@NotNull @ApiParam(value = "The name of the template to run.", required = true) @Valid @RequestParam(value = "name", required = true) String name, @ApiParam(value = "One of a variable set of parameters used to supply constraint paths.") @Valid @RequestParam(value = "constraint1", required = false) String constraint1, @ApiParam(value = "One of a variable set of parameters used to supply constraint operators.") @Valid @RequestParam(value = "op1", required = false) String op1, @ApiParam(value = "One of a variable set of parameters used to supply constraint values.") @Valid @RequestParam(value = "value1", required = false) String value1, @ApiParam(value = "One of a variable set of parameters used to supply constraint codes. Codes are only required if two constraints have the same path.") @Valid @RequestParam(value = "code1", required = false) String code1, @ApiParam(value = "One of a variable set of parameters used to supply extra constraint values (used by LOOKUP constraints).") @Valid @RequestParam(value = "extra1", required = false) String extra1, @ApiParam(value = "The index of the first result to return.") @Valid @RequestParam(value = "start", required = false) Integer start, @ApiParam(value = "The maximum size of the result set.") @Valid @RequestParam(value = "size", required = false) Integer size, @ApiParam(value = "Include column headers. Use friendly for human readable paths. (Only for flat-file formats).", allowableValues = "none, path, friendly") @Valid @RequestParam(value = "columnheaders", required = false) String columnheaders, @ApiParam(value = "", allowableValues = "tab, csv, count, json, jsonobject, jsoncount, xml, html") @Valid @RequestParam(value = "format", required = false, defaultValue = "tab") String format);


    @ApiOperation(value = "Create a List from the Output of a Template.", nickname = "templateToListGet", notes = "This service allows the user to create a list from the result set of running a template with a given set of parameters. The parameters for running the template are the same as when requesting results (see documentation for `template-results`), and in addition to these parameters the user needs to supply a name and optional description for the list to be created. <br/><br/> To define which part of the template results to use, the user must supply a path parameter which indicates a valid column from the output to be used. <br/><br/> Users should provide parameters of the form `constraint{N}`, `op{N}`, `value{N}` and `extra{N}` for each editable contraint, where `N` represents a number to group the values. The value of the `constraint{N}` parameter serves to identify the constraint, and may not be changed. Values for `op{N}` and `value{N}` must be given, and may be anything the user requires. <br/><br/> To run a template, for example which has the following editable constraints:  <br/> ``` <constraint path=\"Gene.symbol\" op=\"=\" value=\"eve\" editable=\"true\"/> <constraint path=\"Gene.length\" op=\"&gt;\" value=\"1000\" editable=\"true\"/> ``` <br/><br/> Then the user should supply the following parameters to run it with the above values: <br/><br/> | Parameter &nbsp; &nbsp; &nbsp; &nbsp; | Value &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> |----------------------|------------------&nbsp; |<br/> | constraint1 &nbsp; &nbsp; &nbsp; &nbsp;| Gene.symbol      |<br/> | op1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | eq &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> | value1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | eve &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;|<br/> | constraint2 &nbsp; &nbsp; &nbsp; &nbsp;| Gene.length &nbsp;|<br/> | op2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | gt &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> | value2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | 1000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/><br/> The value of the number used to identify each constraint is ignored - it must however be consistent for each parameter. One set of template constraint parameters is required for each editable constraint on the query. These are not required for optional constraints.", response = ToList.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={ "Template to list" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = ToList.class) })
    @RequestMapping(value = "/template/tolist",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<?> templateToListGet(@NotNull @ApiParam(value = "The name of the template to run.", required = true) @Valid @RequestParam(value = "name", required = true) String name, @NotNull @ApiParam(value = "The path to use to compose the results. This should be one of the selected view paths.", required = true) @Valid @RequestParam(value = "path", required = true) String path, @NotNull @ApiParam(value = "The name for the new list. There must be no existing list of this name.", required = true) @Valid @RequestParam(value = "listName", required = true) String listName, @ApiParam(value = "One of a variable set of parameters used to supply constraint paths.") @Valid @RequestParam(value = "constraint1", required = false) String constraint1, @ApiParam(value = "One of a variable set of parameters used to supply constraint operators.") @Valid @RequestParam(value = "op1", required = false) String op1, @ApiParam(value = "One of a variable set of parameters used to supply constraint values.") @Valid @RequestParam(value = "value1", required = false) String value1, @ApiParam(value = "One of a variable set of parameters used to supply constraint codes. Codes are only required if two constraints have the same path.") @Valid @RequestParam(value = "code1", required = false) String code1, @ApiParam(value = "One of a variable set of parameters used to supply extra constraint values (used by LOOKUP constraints).") @Valid @RequestParam(value = "extra1", required = false) String extra1, @ApiParam(value = "A description to attach to the new list.") @Valid @RequestParam(value = "description", required = false) String description, @ApiParam(value = "A set of tags to use to categorise the new list separated by semicolon(;).") @Valid @RequestParam(value = "tags", required = false) String tags, @ApiParam(value = "Whether or not to replace any existing list of this name.") @Valid @RequestParam(value = "replaceExisting", required = false, defaultValue = "false") Boolean replaceExisting, @ApiParam(value = "", allowableValues = "json, text") @Valid @RequestParam(value = "format", required = false, defaultValue = "json") String format);


    @ApiOperation(value = "Create a List from the Output of a Template.", nickname = "templateToListPost", notes = "This service allows the user to create a list from the result set of running a template with a given set of parameters. The parameters for running the template are the same as when requesting results (see documentation for `template-results`), and in addition to these parameters the user needs to supply a name and optional description for the list to be created. <br/><br/> To define which part of the template results to use, the user must supply a path parameter which indicates a valid column from the output to be used. <br/><br/> Users should provide parameters of the form `constraint{N}`, `op{N}`, `value{N}` and `extra{N}` for each editable contraint, where `N` represents a number to group the values. The value of the `constraint{N}` parameter serves to identify the constraint, and may not be changed. Values for `op{N}` and `value{N}` must be given, and may be anything the user requires. <br/><br/> To run a template, for example which has the following editable constraints:  <br/> ``` <constraint path=\"Gene.symbol\" op=\"=\" value=\"eve\" editable=\"true\"/> <constraint path=\"Gene.length\" op=\"&gt;\" value=\"1000\" editable=\"true\"/> ``` <br/><br/> Then the user should supply the following parameters to run it with the above values: <br/><br/> | Parameter &nbsp; &nbsp; &nbsp; &nbsp; | Value &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> |----------------------|------------------&nbsp; |<br/> | constraint1 &nbsp; &nbsp; &nbsp; &nbsp;| Gene.symbol      |<br/> | op1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | eq &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> | value1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | eve &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp;|<br/> | constraint2 &nbsp; &nbsp; &nbsp; &nbsp;| Gene.length &nbsp;|<br/> | op2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | gt &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/> | value2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | 1000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br/><br/> The value of the number used to identify each constraint is ignored - it must however be consistent for each parameter. One set of template constraint parameters is required for each editable constraint on the query. These are not required for optional constraints.", response = ToList.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={ "Template to list" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = ToList.class) })
    @RequestMapping(value = "/template/tolist",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<?> templateToListPost(@NotNull @ApiParam(value = "The name of the template to run.", required = true) @Valid @RequestParam(value = "name", required = true) String name,@NotNull @ApiParam(value = "The path to use to compose the results. This should be one of the selected view paths.", required = true) @Valid @RequestParam(value = "path", required = true) String path,@NotNull @ApiParam(value = "The name for the new list. There must be no existing list of this name.", required = true) @Valid @RequestParam(value = "listName", required = true) String listName,@ApiParam(value = "One of a variable set of parameters used to supply constraint paths.") @Valid @RequestParam(value = "constraint1", required = false) String constraint1,@ApiParam(value = "One of a variable set of parameters used to supply constraint operators.") @Valid @RequestParam(value = "op1", required = false) String op1,@ApiParam(value = "One of a variable set of parameters used to supply constraint values.") @Valid @RequestParam(value = "value1", required = false) String value1,@ApiParam(value = "One of a variable set of parameters used to supply constraint codes. Codes are only required if two constraints have the same path.") @Valid @RequestParam(value = "code1", required = false) String code1,@ApiParam(value = "One of a variable set of parameters used to supply extra constraint values (used by LOOKUP constraints).") @Valid @RequestParam(value = "extra1", required = false) String extra1,@ApiParam(value = "A description to attach to the new list.") @Valid @RequestParam(value = "description", required = false) String description,@ApiParam(value = "A set of tags to use to categorise the new list separated by semicolon(;).") @Valid @RequestParam(value = "tags", required = false) String tags,@ApiParam(value = "Whether or not to replace any existing list of this name.") @Valid @RequestParam(value = "replaceExisting", required = false, defaultValue = "false") Boolean replaceExisting,@ApiParam(value = "", allowableValues = "json, text") @Valid @RequestParam(value = "format", required = false, defaultValue = "json") String format);

}
