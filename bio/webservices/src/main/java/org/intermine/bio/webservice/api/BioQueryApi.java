/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.intermine.bio.webservice.api;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-08-04T21:58:55.348+05:30[Asia/Kolkata]")
@Api(value = "query", description = "the query API")
public interface BioQueryApi {

    @ApiOperation(value = "Query the Database for Locations.", nickname = "queryResultsBedGet", notes = "This service provides full access to arbitrary database queries. Queries are accepted in a serialised XML or JSON format, executed and returned in a streaming manner. The query format is a custom subset of the capabilities of SQL; see the InterMine documentation for a full description of the query XML and JSON syntax. <br/><br/> This endpoint specialises in dealing with queries for genomic locations, and returning results in [UCSC BED](http://genome.ucsc.edu/FAQ/FAQformat.html) format. The user is responsible for ensuring that the query contains only suitable types for export. <br/><br/> A suitable query is one where every view column references a field of a `SequenceFeature` (including all sub-classes). The particular field selected is not important, and the object itself will be selected.", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/query/results/bed",
        produces = { "*/*" },
        method = RequestMethod.GET)
    ResponseEntity<String> queryResultsBedGet(@NotNull @ApiParam(value = "A definition of the query to execute in Path-Query XML or JSON format.", required = true) @Valid @RequestParam(value = "query", required = true) String query);


    @ApiOperation(value = "Query the Database for Locations.", nickname = "queryResultsBedPost", notes = "This service provides full access to arbitrary database queries. Queries are accepted in a serialised XML or JSON format, executed and returned in a streaming manner. The query format is a custom subset of the capabilities of SQL; see the InterMine documentation for a full description of the query XML and JSON syntax. <br/><br/> This endpoint specialises in dealing with queries for genomic locations, and returning results in [UCSC BED](http://genome.ucsc.edu/FAQ/FAQformat.html) format. The user is responsible for ensuring that the query contains only suitable types for export. <br/><br/> A suitable query is one where every view column references a field of a `SequenceFeature` (including all sub-classes). The particular field selected is not important, and the object itself will be selected.", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/query/results/bed",
        produces = { "*/*" },
        method = RequestMethod.POST)
    ResponseEntity<String> queryResultsBedPost(@NotNull @ApiParam(value = "A definition of the query to execute in Path-Query XML or JSON format.", required = true) @Valid @RequestParam(value = "query", required = true) String query);


    @ApiOperation(value = "Query the Database for Sequence..", nickname = "queryResultsFastaGet", notes = "This service provides full access to arbitrary database queries. Queries are accepted in a serialised XML or JSON format, executed and returned in a streaming manner. The query format is a custom subset of the capabilities of SQL; see the InterMine documentation for a full description of the query XML and JSON syntax. <br/><br/> This endpoint specialises in dealing with queries for sequence, and returning results in [FASTA](http://en.wikipedia.org/wiki/FASTA_format) format. The user is responsible for ensuring that the query contains only suitable types for export. <br/><br/> A suitable query is one with a single view column which references a field of a `SequenceFeature` (including all sub-classes) or of a a `Protein`. The particular field selected is not important, and the object itself will be selected.", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/query/results/fasta",
        produces = { "*/*" },
        method = RequestMethod.GET)
    ResponseEntity<String> queryResultsFastaGet(@NotNull @ApiParam(value = "A definition of the query to execute in Path-Query XML or JSON format.", required = true) @Valid @RequestParam(value = "query", required = true) String query, @ApiParam(value = "Extra columns to include as extra information in the ninth column.") @Valid @RequestParam(value = "view", required = false) List<String> view);


    @ApiOperation(value = "Query the Database for Sequence..", nickname = "queryResultsFastaPost", notes = "This service provides full access to arbitrary database queries. Queries are accepted in a serialised XML or JSON format, executed and returned in a streaming manner. The query format is a custom subset of the capabilities of SQL; see the InterMine documentation for a full description of the query XML and JSON syntax. <br/><br/> This endpoint specialises in dealing with queries for sequence, and returning results in [FASTA](http://en.wikipedia.org/wiki/FASTA_format) format. The user is responsible for ensuring that the query contains only suitable types for export. <br/><br/> A suitable query is one with a single view column which references a field of a `SequenceFeature` (including all sub-classes) or of a a `Protein`. The particular field selected is not important, and the object itself will be selected.", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/query/results/fasta",
        produces = { "*/*" },
        method = RequestMethod.POST)
    ResponseEntity<String> queryResultsFastaPost(@NotNull @ApiParam(value = "A definition of the query to execute in Path-Query XML or JSON format.", required = true) @Valid @RequestParam(value = "query", required = true) String query, @ApiParam(value = "Extra columns to include as extra information in the ninth column.") @Valid @RequestParam(value = "view", required = false) List<String> view);


    @ApiOperation(value = "Query the Database for Sequence Annotations.", nickname = "queryResultsGff3Get", notes = "This service provides full access to arbitrary database queries. Queries are accepted in a serialised XML or JSON format, executed and returned in a streaming manner. The query format is a custom subset of the capabilities of SQL; see the InterMine documentation for a full description of the query XML and JSON syntax. <br/><br/> This endpoint specialises in dealing with queries for sequence annotations, and returning results in [GFF3](http://en.wikipedia.org/wiki/General_feature_format) format. The user is responsible for ensuring that the query contains only suitable types for export. A suitable query is one where every view column references a field of a `SequenceFeature` (including all sub-classes). The particular field selected is not important, and the object itself will be selected.", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/query/results/gff3",
        produces = { "*/*" },
        method = RequestMethod.GET)
    ResponseEntity<String> queryResultsGff3Get(@NotNull @ApiParam(value = "A definition of the query to execute in Path-Query XML or JSON format.", required = true) @Valid @RequestParam(value = "query", required = true) String query, @ApiParam(value = "Extra columns to include as extra information in the ninth column.") @Valid @RequestParam(value = "view", required = false) List<String> view);


    @ApiOperation(value = "Query the Database for Sequence Annotations.", nickname = "queryResultsGff3Post", notes = "This service provides full access to arbitrary database queries. Queries are accepted in a serialised XML or JSON format, executed and returned in a streaming manner. The query format is a custom subset of the capabilities of SQL; see the InterMine documentation for a full description of the query XML and JSON syntax. <br/><br/> This endpoint specialises in dealing with queries for sequence annotations, and returning results in [GFF3](http://en.wikipedia.org/wiki/General_feature_format) format. The user is responsible for ensuring that the query contains only suitable types for export. A suitable query is one where every view column references a field of a `SequenceFeature` (including all sub-classes). The particular field selected is not important, and the object itself will be selected.", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/query/results/gff3",
        produces = { "*/*" },
        method = RequestMethod.POST)
    ResponseEntity<String> queryResultsGff3Post(@NotNull @ApiParam(value = "A definition of the query to execute in Path-Query XML or JSON format.", required = true) @Valid @RequestParam(value = "query", required = true) String query, @ApiParam(value = "Extra columns to include as extra information in the ninth column.") @Valid @RequestParam(value = "view", required = false) List<String> view);

}
